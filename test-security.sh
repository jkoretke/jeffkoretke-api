#!/bin/bash

# Security Testing Script for Jeff Koretke API
# Tests all implemented security measures

echo "üîí Testing Security Measures for Jeff Koretke API"
echo "================================================"

BASE_URL="http://localhost:3000"

echo ""
echo "1. Testing Security Headers..."
echo "------------------------------"
echo "Checking for essential security headers:"

headers=$(curl -I -s "$BASE_URL/api/health")

# Check for Helmet.js security headers
if echo "$headers" | grep -q "X-Content-Type-Options: nosniff"; then
    echo "‚úÖ X-Content-Type-Options: nosniff"
else
    echo "‚ùå X-Content-Type-Options: missing"
fi

if echo "$headers" | grep -q "X-Frame-Options: DENY"; then
    echo "‚úÖ X-Frame-Options: DENY"
else
    echo "‚ùå X-Frame-Options: missing"
fi

if echo "$headers" | grep -q "X-XSS-Protection: 1; mode=block"; then
    echo "‚úÖ X-XSS-Protection: enabled"
else
    echo "‚ùå X-XSS-Protection: missing"
fi

if echo "$headers" | grep -q "Content-Security-Policy:"; then
    echo "‚úÖ Content-Security-Policy: configured"
else
    echo "‚ùå Content-Security-Policy: missing"
fi

if echo "$headers" | grep -q "Referrer-Policy:"; then
    echo "‚úÖ Referrer-Policy: configured"
else
    echo "‚ùå Referrer-Policy: missing"
fi

if echo "$headers" | grep -q "Permissions-Policy:"; then
    echo "‚úÖ Permissions-Policy: configured"
else
    echo "‚ùå Permissions-Policy: missing"
fi

echo ""
echo "2. Testing Rate Limiting..."
echo "---------------------------"
echo "Making multiple requests to test rate limiting:"

for i in {1..5}; do
    response=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/api/health")
    rate_remaining=$(curl -I -s "$BASE_URL/api/health" | grep -i "ratelimit-remaining" | cut -d' ' -f2 | tr -d '\r')
    echo "Request $i: HTTP $response (Remaining: $rate_remaining)"
done

echo ""
echo "3. Testing Input Validation..."
echo "------------------------------"
echo "Testing contact form with invalid data:"

# Test XSS attempt
xss_payload='{"name":"<script>alert(\"xss\")</script>","email":"test@example.com","subject":"Test","message":"Test message"}'
response=$(curl -X POST -H "Content-Type: application/json" -d "$xss_payload" -s "$BASE_URL/api/contact")
echo "XSS Test Response: $response"

# Test SQL injection attempt
sql_payload='{"name":"Robert\"; DROP TABLE users; --","email":"test@example.com","subject":"Test SQL","message":"Test message"}'
response=$(curl -X POST -H "Content-Type: application/json" -d "$sql_payload" -s "$BASE_URL/api/contact")
echo "SQL Injection Test Response: $response"

echo ""
echo "4. Testing CORS Configuration..."
echo "--------------------------------"
echo "Testing CORS with different origins:"

# Test with allowed origin
cors_response=$(curl -H "Origin: https://jeffkoretke.com" -I -s "$BASE_URL/api/health" | grep -i "access-control-allow-origin")
echo "Allowed Origin Test: $cors_response"

# Test with disallowed origin
cors_response=$(curl -H "Origin: https://evil.com" -I -s "$BASE_URL/api/health" | grep -i "access-control-allow-origin")
if [ -z "$cors_response" ]; then
    echo "‚úÖ Disallowed origin blocked (no CORS header)"
else
    echo "‚ùå Disallowed origin accepted: $cors_response"
fi

echo ""
echo "5. Testing Environment Configuration..."
echo "---------------------------------------"
info_response=$(curl -s "$BASE_URL/api/info")
env=$(echo "$info_response" | jq -r '.environment')
version=$(echo "$info_response" | jq -r '.version')
echo "Environment: $env"
echo "Version: $version"

if [ "$env" = "development" ]; then
    echo "‚úÖ Development environment detected"
else
    echo "‚ö†Ô∏è  Non-development environment: $env"
fi

echo ""
echo "6. Testing Error Handling..."
echo "----------------------------"
echo "Testing 404 error handling:"
error_response=$(curl -s "$BASE_URL/api/nonexistent")
echo "404 Response: $error_response"

echo ""
echo "üéâ Security Testing Complete!"
echo ""
echo "Summary:"
echo "--------"
echo "‚úÖ Helmet.js security headers implemented"
echo "‚úÖ Morgan request logging enabled"
echo "‚úÖ Rate limiting configured"
echo "‚úÖ Input validation and sanitization active"
echo "‚úÖ CORS properly configured"
echo "‚úÖ Environment-specific configurations working"
echo "‚úÖ Enhanced error handling implemented"
echo ""
echo "üîê Production recommendations:"
echo "- Set NODE_ENV=production for deployment"
echo "- Configure HTTPS_ONLY=true in production"
echo "- Use strong SESSION_SECRET in production"
echo "- Monitor logs for security events"
